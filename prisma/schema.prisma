// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("member")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  memberships   Membership[]
  ownedClubs    Club[]     @relation("ClubSupervisor")
  createdRoadmaps Roadmap[]
  createdResources Resource[]
  createdEvents Event[]
  comments      Comment[]
  notifications Notification[]
  analytics     Analytics[]
  eventAttendees EventAttendee[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Club {
  id          String   @id @default(cuid())
  slug        String   @unique
  name        String
  about       String?
  bannerUrl   String?
  supervisorId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  supervisor   User         @relation("ClubSupervisor", fields: [supervisorId], references: [id])
  memberships  Membership[]
  roadmaps     Roadmap[]
  resources    Resource[]
  events       Event[]
  analytics    Analytics[]

  @@index([slug])
}

model Membership {
  id      String   @id @default(cuid())
  userId  String
  clubId  String
  role    String   @default("member") // member, admin
  joinedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  club Club @relation(fields: [clubId], references: [id], onDelete: Cascade)

  @@unique([userId, clubId])
}

model Roadmap {
  id          String   @id @default(cuid())
  clubId      String
  title       String
  description String?
  visibility  String   @default("club") // private, club, public
  version     Int      @default(1)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  club     Club     @relation(fields: [clubId], references: [id])
  creator  User     @relation(fields: [createdBy], references: [id])
  modules  Module[]

  @@index([clubId])
  @@index([visibility])
}

model Module {
  id         String   @id @default(cuid())
  roadmapId  String
  position   Int
  type       String   // article, video, task, project, quiz
  title      String
  content    String?
  contentRef String?  // URL or reference to external content
  duration   Int?     // in minutes
  isRequired Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  roadmap Roadmap @relation(fields: [roadmapId], references: [id], onDelete: Cascade)

  @@index([roadmapId])
}

model Resource {
  id            String   @id @default(cuid())
  clubId        String
  title         String
  type          String   // article, video, repo, slides, dataset, notebook
  content       String?
  url           String?
  tags          String[] // JSON array of strings
  status        String   @default("draft") // draft, pending, published, rejected
  difficulty    String?  // beginner, intermediate, advanced
  estimatedTime Int?     // in minutes
  createdBy     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  club     Club     @relation(fields: [clubId], references: [id])
  creator  User     @relation(fields: [createdBy], references: [id])
  comments Comment[]

  @@index([clubId])
  @@index([status])
  @@index([tags])
}

model Event {
  id           String   @id @default(cuid())
  clubId       String
  title        String
  description  String?
  startAt      DateTime
  endAt        DateTime
  location     String?
  externalLink String?
  maxAttendees Int?
  isVirtual    Boolean  @default(false)
  createdBy    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  club           Club             @relation(fields: [clubId], references: [id])
  creator        User             @relation(fields: [createdBy], references: [id])
  attendees      EventAttendee[]

  @@index([clubId])
  @@index([startAt])
}

model EventAttendee {
  id           String   @id @default(cuid())
  eventId      String
  userId       String
  status       String   @default("registered") // registered, attended, cancelled
  registeredAt DateTime @default(now())

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
}

model Comment {
  id         String   @id @default(cuid())
  resourceId String
  userId     String
  body       String
  parentId   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  resource Resource  @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [userId], references: [id])
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")

  @@index([resourceId])
  @@index([userId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String   // approval, comment, event_reminder, mention
  title     String
  message   String
  isRead    Boolean  @default(false)
  actionUrl String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
}

model Analytics {
  id        String   @id @default(cuid())
  resourceId String?
  userId     String?
  clubId     String?
  action     String   // view, like, share, complete, enroll
  metadata   Json?    // Additional data as JSON
  timestamp  DateTime @default(now())

  resource Resource? @relation(fields: [resourceId], references: [id])
  user     User?     @relation(fields: [userId], references: [id])
  club     Club?     @relation(fields: [clubId], references: [id])

  @@index([resourceId])
  @@index([userId])
  @@index([clubId])
  @@index([timestamp])
}

model CommentReplies {
  id       String @id @default(cuid())
  parentId String
  childId  String

  parent Comment @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  child  Comment @relation("CommentReplies", fields: [childId], references: [id], onDelete: Cascade)

  @@unique([parentId, childId])
}
